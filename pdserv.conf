#
# vim:syntax=yaml
#
# Configuration file for pdserv
# This is a YAML document.
#

---
##########################################################################
# Configuration for the MSR protocol
# Options:
#       port:           unsigned int    Port number of the server
#                                       If not defined, the server will try
#                                       all ports starting from 2345
#       maxconnections: unsigned int    Maximum number of connected clients
#                                       Default: unlimited
#       splitvectors:   true/false      DEPRECATED; Present multidimensional
#                                       variables as individual scalars for
#                                       older MSR protocol clients
#       pathprefix:     string          DEPRECATED; Prepend a prefix to all
#                                       variable paths. DO NOT include forward
#                                       slashes '/' in the path
msr:
    #port: 2345
    #maxconnections: 20
    splitvectors: 1
    #pathprefix: prefix

##########################################################################
# Configuration for persistent parameters
#
# Stores a list of parameters permanently to a Berkeley DB database. 
# The database is written when the process is killed as well as cyclically
# using a preset interval.
# When the database exists upon startup, the values are written during the
# initialization phase, i.e. before the task goes into cyclic mode.
#
# The Berkeley DB database has the advantage of being a very popular
# and robust database. Standard tools exist to work with it. To see
# which variables are stored, use db_dump:
#       db_dump -p <database_path>
#
# Options:
#       database:       string  # Path to Berkeley DB database
#       interval:       uint    # (optional: default: 0 (never))
#                               # Time in seconds when DB is written.
#                               # This only applies to parameter-signal
#                               # If interval is zero, persistent pairs will
#                               # be written when process shuts exits.
#       cleanup:        uint    # (optional, default: 1) If set,
#                               # keys not matching a persistent variable
#                               # are deleted
#       trace:          uint    # (optional, default: 0) If set,
#                               # the parameter value is logged in
#                               # clear text to the logging channel
#       variables:      list
#         - "/param/path"               # Single parameter
#
#         - parameter: "/param/path"    # Single parameter
#
#         - parameter: "/param/path"    # Parameter signal pair:
#           signal: "/path/to/source"   # The value of signal is stored to
#                                       # the db and reloaded into parameter
#                                       # upon restore.
#                                       # Parameter and Signal must have the
#                                       # same data type and size
#                                       # e.g. Engine hour counter
#                                       # NOTE: manually setting the
#                                       # parameter will discard the signal
#                                       # and will subsequently be treated as
#                                       # if it had no signal.
#
#persistent:
#    interval:   60
#    trace: 0
#    cleanup: 1
#    database:   /tmp/pdserv.db
#    variables:
#      - /parameter1
#      - parameter: /parameter2
#      - parameter: /parameter3
#        signal: /signal

##########################################################################
# Logging configuration
#
# PDSERV uses the log4cplus package for logging. This is a very powerful
# logging mechanism which is highly configurable. Its design and
# configuration closely resembles the very popular log4j Java tool.
# More information about this configuration can be found by searching
# for "log4j configuration files" and applying it appropriately using the
# example configuration below
# See https://logging.apache.org/log4j/1.2/manual.html
#
# pdserv logs to the following categories:
#   log4cplus.rootLogger: all activities concerning application
#   log4cplus.logger.msr: activities concerning MSR protocol
#   log4cplus.logger.parameter: Parameter changes
#   log4cplus.logger.persistent: Clear text persistent parameter values
#                                when "trace" is true
#   log4cplus.logger.event: Event logging
#
# See http://log4cplus.sourceforge.net/docs/html/classlog4cplus_1_1Appender.html
# for documentation regarding appenders and their options. Click on the
# desired appender in the inheritance diagram
#
logging: |
    #log4cplus.rootLogger=INFO, syslog
    log4cplus.rootLogger=TRACE, console

    ## Here is the parameter channel. Changes to parameters are logged here
    ## If you log parameters to another destination, consider setting the
    ## additivity flag to false so that these messages are not propagated
    ## to the parents (rootLogger) as well.
    #log4cplus.logger.parameter=INFO, parameterlog
    #log4cplus.additivity.parameter=false

    ## Event channel. Application events are sent to this channel
    ## See the comment about additivity above.
    #log4cplus.logger.event=INFO, eventlog
    #log4cplus.additivity.event=false

    ## Example configuration for logging to syslog
    log4cplus.appender.syslog=log4cplus::SysLogAppender
    log4cplus.appender.syslog.ident=pdserv
    log4cplus.appender.syslog.facility=LOCAL0
    log4cplus.appender.syslog.layout=log4cplus::PatternLayout
    log4cplus.appender.syslog.layout.ConversionPattern=%p: %c <%x> - %m%n

    ## Example configuration for logging to a file. More sophisticated
    ## file appenders are RollingFileAppender and DailyRollingFileAppender
    ## capable of truncating the log file size
    log4cplus.appender.parameterlog=log4cplus::FileAppender
    log4cplus.appender.parameterlog.File=/tmp/parameter.log
    log4cplus.appender.parameterlog.layout=log4cplus::PatternLayout
    log4cplus.appender.parameterlog.layout.ConversionPattern=%D %c <%x>: %m%n

    ## Example configuration for logging to a file
    log4cplus.appender.filelog=log4cplus::FileAppender
    log4cplus.appender.filelog.File=/tmp/pdserv.log
    log4cplus.appender.filelog.Append=true
    log4cplus.appender.filelog.layout=log4cplus::PatternLayout
    log4cplus.appender.filelog.layout.ConversionPattern=%D: %-5p %c <%x>: %m%n

    ## Example configuration for logging output to the console
    log4cplus.appender.console=log4cplus::ConsoleAppender
    log4cplus.appender.console.logToStdErr=1
    log4cplus.appender.console.layout=log4cplus::PatternLayout
    log4cplus.appender.console.layout.ConversionPattern=%D %p %c %x: %m%n

    ## This appender does not output anything
    log4cplus.appender.null=log4cplus::NullAppender
